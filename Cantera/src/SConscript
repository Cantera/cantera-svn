from buildutils import *

Import('env','buildTargets','installTargets')

def defaultSetup(env, subdir, extensions):
    return mglob(env, subdir, *extensions)

def equilSetup(env, subdir, extensions):
    env.Append(CPPPATH=['#ext/f2c_libs'])
    return defaultSetup(env, subdir, extensions)

def numericsSetup(env, subdir, extensions):
    if env['use_sundials'] == 'y':
        remove = 'CVodeInt.cpp'
    else:
        remove = 'CVodesIntegrator.cpp'
    return [s for s in mglob(env, subdir, *extensions)
            if s.name != remove]

# (subdir, library name, (file extensions), (extra setup(env)))
libs = [('base', 'ctbase', ['cpp'], defaultSetup),
        ('thermo', 'thermo', ['cpp'], defaultSetup),
        ('equil', 'equil', ['cpp','c'], equilSetup),
        ('converters', 'converters', ['cpp'], defaultSetup),
        ('numerics', 'ctnumerics', ['cpp'], numericsSetup),
        ('kinetics', 'kinetics', ['cpp'], defaultSetup),
        ('transport', 'transport', ['cpp'], defaultSetup),
        ('spectra', 'ctspectra', ['cpp'], defaultSetup),
        ('oneD', 'oneD', ['cpp'], defaultSetup),
        ('zeroD', 'zeroD', ['cpp'], defaultSetup),
        ]

for subdir, libname, extensions, setup in libs:
    localenv = env.Clone()
    source = setup(localenv, subdir, extensions)
    for header in mglob(localenv, subdir, 'h'):      
        h = localenv.Command('../include/cantera/kernel/%s' % header.name, header,
                             Copy('$TARGET', '$SOURCE'))
        buildTargets.extend(h)
        inst = localenv.Install(pjoin('$ct_incdir', 'kernel'), h)
        installTargets.extend(inst)

    lib = localenv.Library(pjoin('../lib', libname),
                           source=source)
    inst = localenv.Install('$ct_libdir', lib)
    buildTargets.extend(lib)
    installTargets.extend(inst)
