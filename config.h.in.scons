//
//  Run the 'preconfig' script to generate 'config.h' from this input file.
//
#ifndef CT_CONFIG_H
#define CT_CONFIG_H

//---------------------------- Version Flags ------------------//
// Cantera version -> this will be a double-quoted string value
//                    refering to branch number within svn
%(CANTERA_VERSION)s

// Integer for major number of Cantera
#define CANTERA_VERSION_MAJORNUMBER  18
// Flag indicating it's part of major version 18
#define CANTERA_VERSION_18       1
//  Flag indicating it's a development version
#define CANTERA_VERSION_18_XXX   1

//------------------------ Development flags ------------------//
//
// Compile in additional debug printing where available.
// Note, the printing may need to be turned on via a switch.
// This just compiles in the code.
%(DEBUG_MODE)s

// Compiling with PURIFY instrumentation
%(PURIFY_MODE)s

//------------------------ Fortran settings -------------------//


// define types doublereal, integer, and ftnlen to match the 
// corresponding Fortran data types on your system. The defaults
// are OK for most systems

typedef  double       doublereal;   // Fortran double precision 
typedef  int          integer;      // Fortran integer
typedef  int          ftnlen;       // Fortran hidden string length type



// Fortran compilers pass character strings in argument lists by
// adding a hidden argement with the length of the string. Some
// compilers add the hidden length argument immediately after the
// CHARACTER variable being passed, while others put all of the hidden
// length arguments at the end of the argument list. Define this if 
// the lengths are at the end of the argument list. This is usually the
// case for most unix Fortran compilers, but is (by default) false for
// Visual Fortran under Windows.
#define STRING_LEN_AT_END


// Define this if Fortran adds a trailing underscore to names in object files.
// For linux and most unix systems, this is the case.
%(FTN_TRAILING_UNDERSCORE)s


%(HAS_SUNDIALS)s
%(SUNDIALS_VERSION_22)s
%(SUNDIALS_VERSION_23)s
%(SUNDIALS_VERSION_24)s

//-------- LAPACK / BLAS ---------

%(LAPACK_FTN_STRING_LEN_AT_END)s
%(LAPACK_NAMES_LOWERCASE)s
%(LAPACK_FTN_TRAILING_UNDERSCORE)s

//--------- operating system --------------------------------------

// The configure script defines this if the operatiing system is Mac
// OS X, This used to add some Mac-specific directories to the default
// data file search path.
%(DARWIN)s
%(HAS_SSTREAM)s

// Identify whether the operating system is cygwin's overlay of
// windows, with gcc being used as the compiler.
%(CYGWIN)s

// Identify whether the operating system is windows based, with
// microsoft vc++ being used as the compiler
%(WINMSVC)s

// Identify whether the operating system is solaris 
// with a native compiler 
%(SOLARIS)s

//--------- Fonts for reaction path diagrams ----------------------
%(RXNPATH_FONT)s

//---------- C++ Compiler Variations ------------------------------

// This define is needed to account for the variability for how
// static variables in templated classes are defined. Right now
// this is only turned on for the SunPro compiler on solaris.
// in that system , you need to declare the static storage variable.
// with the following line in the include file
//
//    template<class M> Cabinet<M>* Cabinet<M>::__storage;
//
// Note, on other systems that declaration is treated as a definition
// and this leads to multiple defines at link time
%(NEEDS_GENERIC_TEMPL_STATIC_DECL)s

//--------------------- Python ------------------------------------
// This path to the python executable is created during
// Cantera's setup. It identifies the python executable 
// used to run Python to process .cti files. Note that this is only
// used if environment variable PYTHON_CMD is not set.
%(PYTHON_EXE)s

// If this is defined, the Cantera Python interface will use the
// Numeric package
%(HAS_NUMERIC)s

// If this is defined, the Cantera Python interface will use the
// numarray package
%(HAS_NUMARRAY)s

// If this is defined, the Cantera Python interface will use the
// numpy package
%(HAS_NUMPY)s

// If this is defined, then python will not be assumed to be
// present to support conversions
%(HAS_NO_PYTHON)s

//--------------------- Cantera ----------------------------------- 
// This data pathway is used to locate a directory where datafiles
// are to be found. Note, the local directory is always searched
// as well. 
%(CANTERA_DATA)s


%(WITH_HTML_LOGS)s

//--------------------- compile options ----------------------------
%(THREAD_SAFE_CANTERA)s

//--------------------- optional phase models ----------------------
//    This define indicates the enabling of the inclusion of
//    accurate liquid/vapor equations
//    of state for several fluids, including water, nitrogen, hydrogen,
//    oxygen, methane, andd HFC-134a.
%(INCL_PURE_FLUIDS)s
%(WITH_PURE_FLUIDS)s

%(WITH_LATTICE_SOLID)s
%(WITH_METAL)s
%(WITH_STOICH_SUBSTANCE)s
//    Enable expanded thermodynamic capabilities, adding
//    ideal solid solutions
%(WITH_IDEAL_SOLUTIONS)s
//    Enable expanded electrochemistry capabilities, include thermo
//    models for electrolyte solutions.
%(WITH_ELECTROLYTES)s

%(WITH_PRIME)s

//    Enable the VCS NonIdeal equilibrium solver. This is
//    accessed by specifying the solver=2 option
%(WITH_VCSNONIDEAL)s

//-------------- Optional Cantera Capabilities ----------------------

//    Enable sensitivity analysis via changing H298 directly
//    for species
%(H298MODIFY_CAPABILITY)s

#endif
